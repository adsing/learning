
Functions - no state so no side effects
Haskell is lazy; won't compute till it has to show results. Hence, infinite data structs
Statically types with type inference
Higher level concepts - ?

Negative numbers to be surrounded in (-x)
True/False (&&, ||, not
4 == 5 or "str1" == "str2"
4 + 5.0   #4 becomes 4.0 (implicit 
functionFoo arg1 arg2     # succ 3 gives 4, min 3 4 gives 4, div 91 9 gives 10 (int division) ... functions have prefix notion i.e. fn arg1 arg2. Infix notion by `foo` e.g arg1 `foo` arg2  #clearer
(succ 3) * (min 3 4) + 1  #=10 ... function application (foo arg1 arg2)

#compiler : Haskell Platform
GHC myscript.hs
#REPL
$ ghci
> :set prompt "ghci>"
ghci> :l myfunctions   #loads myfunctions.hs


{-
multi
line 
comment
-}

msg = "hello there"
lst = [1..10]
main = do print $msg
          print lst
          print $ 5 + 4.0
          print $ succ 5
          print $ min 4.1 3.1
          print $ (succ 3) * (min 3 4) + 1   -- prefix notion
          print $ (succ 3) * (3 `min` 4) + 1 -- infix notion
          print $ 91 `div` 9    -- integer divison
          print $ 91 / 9

