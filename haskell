
# from https://codewords.recurse.com/issues/one/an-introduction-to-functional-programming
Pure functions - take a value and return a value (same value for same args)
Immutability - data is not mutated. E.g. loop has increment indexer + sum to save result instead use recursion until empty collection
Referential Transparency - ability to replace a fn call with its return value
Function as first class citizen - they are variable/constants; passed & returned from fn 
    - higher order fns e.g. filter/map/reduce instead of iterating over lists. 
        - map(fn, [...items...]) # returns collection same size as input with fn applied on each
        - reduce(fn(a,x), [...items..], starting_value_optional) #apply fn over each item + accumulated value a with an optional starting value)
    - merge similar fn with difference as a new fn passed as variable (python :: import operator .. operator.add
Pipelining - data, (fn1, fn2, fn3...) # output of f1 applied on data is input to fn2
         -- reduce(lambda a, x: map(x, a), fns, data)
Closures - defined by defining & returning a fn ... within a fn to enclose the scope of the defined fn
        def call(fn, key):
            def apply_fn(record):
                return assoc(record, key, fn(record.get(key)))
            return apply_fn
        call(lambda x: 'Canada', 'country')   # returns a fn which accepts a record and has key('country') and fn (lamba x:'Canada') in scope. 
                        #It gets the 'country' key of record, calls, the fn on that key and calls assoc() fn with record, key, value 'Canada'  #assoc does a deep copy and replaces key->value and returns
Currying - break down a fn that takes multiple args into series of fn that take part of the args
         - partial function application (may take more than one arg. while curry fn take only one arg)
     def add(a):
        def foo(b):
           return a+b
        return foo
     add(3)(4)   instead of add(3,4)
Composition : f(g(x))


#from http://learnyouahaskell.com/starting-out
Functions - no state so no side effects
Haskell is lazy; won't compute till it has to show results. Hence, infinite data structs
Statically types with type inference
Higher level concepts - ?


#compiler : Haskell Platform
GHC myscript.hs
#REPL
$ ghci
> :set prompt "ghci>"
ghci> :l myfunctions   #loads myfunctions.hs
ghci> foo 2 3
..
ghci> let myList = [1,2,3]
# GHC
myList = [1,2,3]
main = print $ 4 * 3

-- comment
{- ... -} multiline comment
Negative numbers to be surrounded in (-x)
True/False (&&, ||, not
4 == 5 or "str1" == "str2"
4 /= 5   -- not equal
4 + 5.0   #4 becomes 4.0 (implicit)

r = 5        #variables are immutable or "invariable" within a scope i.e. defined once & can't be changed later
#variable begin with lowercase and contains letter/numbers/_ or '   (' suffix to indicate non-lazy fn)

y = x+2 #variable can be defined later or externally from a file
x=3

functionFoo arg1 arg2 = arg1 * arg2    #fnname args = definition using args and others already defined
functionFoo(2, 3) or functionFoo 2 3              #fn call .. fn(x) . Fn call takes precedence over other operators like + *
foo arg1 arg2 = arg1 + arg2 + 200   # definition
bar argX = foo argX argX+1  #using fn to define new fn
nonLazyFn' args = (bar args) + 1   -- denotes a non-lazy fn due to () in implementation, ' is a valid fn character. fn can't begin with upper case!
# succ 3 gives 4, min 3 4 gives 4, div 91 9 gives 10 (int division) ... functions have prefix notion i.e. fn arg1 arg2. Infix notion by `foo` e.g arg1 `foo` arg2  #clearer
(succ 3) * (min 3 4) + 1  #=10 ... *function application* (foo arg1 arg2)
triangleArea a b c = sqrt(s * (s-a) * (s-b) * (s-c)) 
    where s = (a+b+c)/2                              #use where to save intermediate results. Note: where is indented


-- if stmt is an expression
if x > 100
then 100
else x    --else is mandatory since fn must return something

https://rextester.com/l/haskell_online_compiler
        --main = print $ 4 * (-3)
        {-
        multi
        line 
        comment
        -}

        msg = "hello there"
        lst = [1..10]

        doubleMe x = x + x
        doubleMeAdd x y = doubleMe x + doubleMe y+1
        doubleMeAddConditional x y = if x+y > 100 then x+y else doubleMe x + doubleMe y+1
        main = do print $msg
                  print lst
                  print $ 5 + 4.0
                  print $ succ 5
                  print $ min 4.1 3.1
                  print $ (succ 3) * (min 3 4) + 1   -- prefix notion
                  print $ (succ 3) * (3 `min` 4) + 1 -- infix notion
                  print $ 91 `div` 9    -- integer divison
                  print $ 91 / 9
                  print $ succ (succ 9)
                  print $ doubleMe 10
                  print $ doubleMeAdd 2 3
                  print $ doubleMeAdd 2.1 3.2
                  print $ doubleMeAddConditional 2.1 3.2
                  print $ doubleMeAddConditional 20.1 30.2
                  print $ doubleMeAddConditional 50 50
                  print $ doubleMeAddConditional 200.1 300.2
                  --print $ doubleMeAdd (doubleMe 2) (doubleMe 3)  -- 4+6=10
                  --print $ doubleMe (doubleMe 2) + (doubleMe 3)  -- 4+6=10 .. 20
                  --print $ add "xx" "yy"

lists - homogenous (same type)
"strings" are lists ['s','t','r','i','n','g','s']
Add lists with ++ but this creates a new list each time
'A':" cat"  -- : is 'cons operator' adds the element to beginning without new list overhead
0:[1,2,3]   -- same as 0:1:2:3:[]
!! for indexing (start as 0, no concept of -1)
"OK"!!1  -- gives 'K'
odd 121   --True
even 121  --False  

list of lists -- (sublists of same type)   #see https://repl.it/repls/SimilarIckyExecutables for examples tested
let b = [ [1,2,3],[4,5,6],[7,8,9]]
b!!1  -- [4,5,6]
b++[[10,11,12]]
[(-2),(-1),0]:b
head b         -- first element
tail b         -- everything other than head
last b         -- last element
init b         -- everything other than last

length b
null b          -- if b==[] then True else False
reverse b
take 2 "HELLO"  -- first 2 char/elements as new list "HE
take 10 "HELLO" -- OK to exceed bounds gives "HELLO"
drop "2" "HELLO" -- give "LLO". drop 0 "HELLO" gives "HELLO", drop 1000 "HELLO" gives []
minimum [1,2,3]  -- 1
maximum [1,2,3]  -- 3
sum [1,2,3]      -- 6
product[1,2,3]      -- 6
2 `elem` [1,2,3]  -- True (element in list)
[1..10]         -- enumeration [start, next .. end] 
                -- [10,9..1] for reverse decreasing list (not [10..1] gives []) and [10,8,1]  gives [10, 8,6,4,2]
['a'..'z']   "abc..xyz"    -- can use range on float also but avoid
-- if end not specified then list to infinity
take 24 [13,26..]
take 10 cycle([1,2,3])        --repeat this list in cycle [1,2,3,1,2,3,1,2,3,1]
take 10 (repeat 5)
replicate 3 10   -- [10,10,10]  replicate Ntime Number


list comprehensions :: [ output_fn | input set, conditions or predicate ]
[ 2*x | x <- [1..10] ]              -- [2,4,6,8,10,12,14,16,18,20]
[ 2*x | x <- [1..100], x `mod` 7 == 3 ]

boomBang ls = [ if x < 10 then "BANG!" else "BOOM!" | x <- ls, odd x ] -- a comprehension that replaces odd number greater than 10 with "BANG!" and odd number that's less than 10 with "BOOM!". If a number isn't odd, we throw it out of our list. 
boomBang [7..13]
=> ["BANG!","BANG!","BOOM!","BOOM!"]

If we wanted all numbers from 10 to 20 that are not 13, 15 or 19, we'd do:
[x | x <- [10..20], x/=13, x/=15, x/=19]
=> [10,11,12,14,16,17,18,20]
