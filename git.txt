$ git init   #create a git project under VC

Git has 3 stages/parts:: working dir -> staging area -> repo

1. working dir :: create/eidt/delete files  (possible to have untracked files)
2. staging area :: list changes made to working dir   $ git add            #add file to staging area
                                                      $ git status
                                                      $ git diff <filename>
3. repo :: store the changes as different versions by  $ git commit
                                                       $ git log      # 40 char SHA hash

Log
$ git log <filename>
$ git log origin/master..HEAD   #diff of current brach with remote master branch ...shows diff between local and remote repo!
$ git log --stat -n 10   #list of (last 10) commits with list of files changed per commit
$ git log --after=10/01/2019
$ git log --auther=jcui
$ git log --auther=jcui --grep "Table Editor"
$ git log --pretty=oneline         #brief commit history

Current commit is called HEAD
$ git show HEAD        #show log for all file changed in head

Discard current changes and pull from HEAD
$ git checkout HEAD [filename]

Unstage a file (so that it is not committed but still in working dir)
$ git reset HEAD [filename]


Reset (reverting back) to a previous git commit log history (discarding some recent commits and going back to a prior good state):
$ git reset [commit_SHA 7 char atleast]    ****
# "$ git log" to see history & to find which version you want to revert to 


Amend your commits - ability to change history
$ git commit -a  --amend

Branching
$ git branch                  #shows current branch as * and other branches as well
$ git branch new_branch       # creates new branch
$ git checkout new_branch     # switch branch  (switch = checkout)
#...do edits/adds/commits to branch
$ git branch master           # switch back to master
$ git merge new_branch        # merge to master (Fast-forward merge type in this case...commits from branch now show up in merge)
$ git branch -d new_branch    # delete branch

Cherry-pick - to apply captures the content of a commit from another (as a patch) and applies to current branch
$ git checkout new_branch
$ git cherry-pick <SHA_from_other_branch>   #may have to handle merge manually

Stash - holding area for when changing braches and you have uncommitted but edited work in current branch
$ git stash  #save current wd/uncommitted changes...change branch and work on other development...come back to this branch and then do
$ git stash apply  #puts wd back in with your previous changes
# multiple stash
$ git stash list    #two stash  stash@{0} and stash@{1}
$ git apply stash@{1}

Rebase:
Move branch into main (cleaner history)
$ git rebase master   #on branch
$ git rebase bugFix   #on master ... move master to bugFix

Clone
$ git clone remote_location clone_name   # origin = remote_location
$ git fetch                              # update clone from origin to origin/master (branch) and not your master branch 
#(does not merge, just get latest from remote branch)
$ git merge origin/master
...
$ git push origin my_branch    # my_branch can be master   ... now remote repo owner can view your my_branch for changes made and decide to merge with those or not


$ git remote -v
origin  <path> (fetch/push)

A remote is a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.
The Git Collaborative Workflow are steps that enable smooth project development when multiple collaborators are working on the same Git project.

We also learned the following commands
    git clone: Creates a local copy of a remote.
    git remote -v: Lists a Git projectâ€™s remotes.
    git fetch: Fetches work from the remote into the local copy.
    git merge origin/master: Merges origin/master into your local branch.
    git push origin <branch_name>: Pushes a local branch to the origin remote.

