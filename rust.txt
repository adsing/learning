Rust Language
    for speed & stablility

Book -  https://doc.rust-lang.org/stable/book;
        * https://rust-book.cs.brown.edu/ (with quiz);
        rustup; run rustup docs --book
    Chapters 2, 12, and 20 are project chapters; the rest are concept chapters.

Install : curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
# Needs a linker (typically uses the one with C/C++ installed .e.g gcc/Clang. Also some Rust packages depend on C code so needs a C compiler)
# installed version 1.74.1 in Dec 2023

$ rustc --version
rustc 1.80.0 (051478957 2024-07-21)

Update:: rustup update stable
Uninstall:: rustup self uninstall


rustup : installer, version mgmt tool & documentation (rustup doc)
rustc  : compiler
cargo  : build system & pacakge/dependency manager
rustfmt: code formatter

"rustc file.rs"   - compiles the code and builds an executable for a single file (file.ext)
"rustfmt file.rs" - formats the code

$ cargo --version
cargo 1.80.0 (376290515 2024-07-16)

"cargo new <name>" - create package with "name" + git initialize. See Cargo.toml (name of 'cargo'; version/edition of Rust; and any dependency packages/crates).
                    Put code under sub-folder "src". Top directory for README, configs
"cargo check" - compile (only) your project *
"cargo build" - build your project and create an executable (in "target/debug" sub-folder & Cargo.lock to track vesions of dependencies)
"cargo build --release" - build for release/benchmarking (optimized version that's 10x smaller than debug version)
"cargo run"   - build & run your project *
"cargo test"  - test your project
"cargo doc"   - build documentation for your project
"cargo publish" - publish a library to crates.io

"cargo add <crate_package>" - updates Cargo.toml and downloads any dependency for the crate package e.g. rand. Saves versions of dependent package in Cargo.lock for having a reproducible build.
"cargo update" - determine latest (but compatible based on SemVer) version of dependencies & updates Cargo.lock

"cargo fmt" - format the code (or rustfmt some_code.rs)
"cargo fix" - fix compiler warnings
"cargo clippy" - static code analysis

Rust metadata & toolchain in ~/.rustup (RUSTUP_HOME)
Cargo (CARGO_HOME) ~/.cargo
        ~/.cargo/bin has cargo | rustc | rustup

Code in /Desktop/github/code/rust

$ cargo new --bin hello --vcs git
     Created binary (application) `hello` package

$ tree hello/
hello/
├── Cargo.toml
└── src
    └── main.rs

1 directory, 2 files

$ ll hello/
total 24
drwxrwxr-x 4 user user 4096 Aug  5 21:52 ./
drwxrwxr-x 3 user user 4096 Aug  5 21:52 ../
-rw-rw-r-- 1 user user  174 Aug  5 21:52 Cargo.toml
drwxrwxr-x 6 user user 4096 Aug  5 21:52 .git/
-rw-rw-r-- 1 user user    8 Aug  5 21:52 .gitignore
drwxrwxr-x 2 user user 4096 Aug  5 21:52 src/

$ cd hello


$ cargo run
   Compiling hello v0.1.0 (/home/user/Desktop/github/code/rust/hello)
    Finished dev [unoptimized + debuginfo] target(s) in 0.28s
     Running `target/debug/hello`
Hello, world!


$ tree
.
├── Cargo.lock
├── Cargo.toml
├── src
│   └── main.rs
└── target
    ├── CACHEDIR.TAG
    └── debug
        ├── build
        ├── deps
        │   ├── hello-d05b7befbbac835b
        │   └── hello-d05b7befbbac835b.d
        ├── examples
        ├── hello
        ├── hello.d
        └── incremental
            └── hello-1o51jik9wfhbk
                ├── s-gnig39yffx-17ldmq6-llmkkliaq2jpnek1qh57s6xz
                │   ├── 14ry2bwiy49bg235.o
                │   ├── 1g8gtodx3goa5er1.o
                │   ├── 2fcxicak2xl3m6q3.o
                │   ├── 2ztquemw1wer6o9x.o
                │   ├── dep-graph.bin
                │   ├── hnwoghqcdtnuzqv.o
                │   ├── query-cache.bin
                │   ├── qxkexfu97f5vg70.o
                │   └── work-products.bin
                └── s-gnig39yffx-17ldmq6.lock

$ target/debug/hello
Hello, World!

$ cat src/main.rs
fn main() {
    println!("Hello, world!");
}

$ cargo clean
