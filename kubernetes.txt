Kubernetes up & running book 2nd edition
=========================================

Need to know docker. 

K8s started in 2014, open-source infrastructure (container deployment/orchestration) for cloud deployment (any sized compute node). 
Distributes system, microservices that are scalable & reliable.

Benefits:
o Velocity :: feature release quickly (hourly) & reliably. 
  - Immutability - containers/k8s provide immutable infra through artifact. Example of mutable infra is apt-get (get binaries and 
            install on top of existing binaries) so infra is not a single artifact but collection of incremental updates over time.
            Immutable infra = new/complete/immutable image... with update replacing the image (rollack easy to older image).
  - Declarative config - eberything in K8s is a declarative config object that represents the desired state of system.
            Opposed to imperative config where state = series of instructions/actions. E.g. run A; run B; run C.
            Declarative config defines "state". E.g. replicas = 3.
            Store declarative config in source control is "infra as code"            
  - online self-healing systems - continously monitor your current state to ensure it matches desired/config state. E.g. ensure replicas=3
            Less time spent on operations and maintenance.
            "Operator" application runs a software like SQL DBW with wrapper code to detect health + healing.
o Scalability with "decoupled" architecture
  - Decoupling of components through well-defined APIs (implementer/consumer balance with low communication overhead) and
    service load balancer (demand/supply balance).
  - Easy scaling for applications & clusters
            Due to immutability+declarative nature, scale to more replicas (or auto-scale)
            For cluster, add new machine with same image or using declarative config
  - Scaling teams with micro-services: Ideal team size=2 pizza (6-8 people for knowledge sharing, decision making and sense of purpose)
            Each team builds one micro-service, combination of teams/microservices.
            K8s abtractions for building decoupled microservice architecture:
              = pods (group container of different images i.e. micro-services into single deployable unit)
              = service (load balancing, naming, discovery to isolate one service from another)
              = namespaces (isolation, access control)
              = ingress obejcts (combine multiple microsserices into single external API)
  - Separation of concerns for consistency & scaling
            Decoupling of OS/machine and app.
            Small teams required for maintaining apps/OS/machines
            KaaS - K8s-as-a-service on cloud for very small teams
o Abstracting your infra - Separates developer from machine (portability across machine/clouds)
o Efficiency 
  - Abtraction aids thought-process
  - Mchine used optimally (better utilization)
  - Cheap to create test/development environments with namespace (test/dev)


Creating and running containers:
================================
K8s platform for managing distributes applications. First, need to know how to put applications in container images.
Application = source code + library (perhaps shared e.g. libc) + language runtime. Potential issue with shared library (not installed on a host; or different version).
So image & infrastructure should be immutable.
Container - creation & register/upload of image; services/infra to run these. Container apps run inside an OS container
K8s supports Docker imagesand other OCI-compatible images (Open Contaner Initiative).
Docker - each layer add/removes/modifies preceding layers. Each config line adds a layer.
Containers :: (a) System contains like OS - full boot cycle with serive like ssh. (b) Application container - run a single program (preferred method).

Building with Docker: 
1. ".dockerignore" - do not copy these files into image.
2. Dockerfile is recipe for how to build the container image. 

Example:
FROM node:10          # Start from a Node.js 10 (LTS) image 1
WORKDIR /usr/src/app  # Specify the current working directory inside the image in which all commands will run 2
COPY package*.json ./ # Copy package files and install dependencies 3
RUN npm install
COPY . .               # Copy all of the app files into the image 4
CMD [ "npm", "start" ] # The default command to run when starting the container 5

# create simple-node Docker image
$ docker build -t simple-node .
#run it on locahost:3000
$ docker run --rm -p 3000:3000 simple-node
$ docker build -t simple-node .

Pitfalls of Docker file:
1. files removed by subsequent layer are still present in parent image and thus making the container image bulky.
2. changes made to in-between layers require all subsequent layers to be rebuilt. So try to make changes to last lines of Dockerfile.
3. Don't do compilation on docker image - leaves all the build/link tools in image. That is unless you can do multi-stage builds (build in one stage and then use the binary build image in deployment build).
4. Security - dont built images with passwords baked in.

Multi-state builds in docker produces multiple images; each is a stage from which artifacts from preceding stages can be copied to current stage.

# STAGE 1: Build
FROM golang:1.11-alpine AS build
RUN apk update && apk upgrade && apk add --no-cache git nodejs bash npm   # Install Node and NPM
RUN go get -u github.com/jteeuwen/go-bindata/...  # Get dependencies for Go part of build
RUN go get github.com/tools/godep
WORKDIR /go/src/github.com/kubernetes-up-and-running/kuard
COPY . .  # Copy all sources in
# This is a set of variables that the build script expects
ENV VERBOSE=0
ENV PKG=github.com/kubernetes-up-and-running/kuard
ENV ARCH=amd64
ENV VERSION=test
RUN build/build.sh   # Do the build. Script is part of incoming sources.

# STAGE 2: Deployment
FROM alpine
USER nobody:nobody
COPY --from=build /go/bin/kuard /kuard    #copy from build image
CMD [ "/kuard" ]

$ docker build -t kuard .
$ docker run --rm -p 8080:8080 kuard

Storing images in remote repository (like Artifactory) :
$ docker login  #authenticate   dockerhub.com - public repo
$ docker tag myapp dockerhub.com/myaccount/myapp:v2
$ docker push dockerhub.com/myaccount/myapp:v2

Docker runtime
$ docker run -d --name myapp --publish 8080:80  dockerhub.com/myaccount/myapp:v2
