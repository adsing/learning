Kubernetes up & running book 2nd edition
=========================================

Need to know docker. 

K8s started in 2014, open-source infrastructure (container deployment/orchestration) for cloud deployment (any sized compute node). 
Distributes system, microservices that are scalable & reliable.

Benefits:
o Velocity :: feature release quickly (hourly) & reliably. 
  - Immutability - containers/k8s provide immutable infra through artifact. Example of mutable infra is apt-get (get binaries and 
            install on top of existing binaries) so infra is not a single artifact but collection of incremental updates over time.
            Immutable infra = new/complete/immutable image... with update replacing the image (rollack easy to older image).
  - Declarative config - eberything in K8s is a declarative config object that represents the desired state of system.
            Opposed to imperative config where state = series of instructions/actions. E.g. run A; run B; run C.
            Declarative config defines "state". E.g. replicas = 3.
            Store declarative config in source control is "infra as code"            
  - online self-healing systems - continously monitor your current state to ensure it matches desired/config state. E.g. ensure replicas=3
            Less time spent on operations and maintenance.
            "Operator" application runs a software like SQL DBW with wrapper code to detect health + healing.
o Scalability with "decoupled" architecture
  - Decoupling of components through well-defined APIs (implementer/consumer balance with low communication overhead) and
    service load balancer (demand/supply balance).
  - Easy scaling for applications & clusters
            Due to immutability+declarative nature, scale to more replicas (or auto-scale)
            For cluster, add new machine with same image or using declarative config
  - Scaling teams with micro-services: Ideal team size=2 pizza (6-8 people for knowledge sharing, decision making and sense of purpose)
            Each team builds one micro-service, combination of teams/microservices.
            K8s abtractions for building decoupled microservice architecture:
              = pods (group container of different images i.e. micro-services into single deployable unit)
              = service (load balancing, naming, discovery to isolate one service from another)
              = namespaces (isolation, access control)
              = ingress obejcts (combine multiple microsserices into single external API)
  - Separation of concerns for consistency & scaling
            Decoupling of OS/machine and app.
            Small teams required for maintaining apps/OS/machines
            KaaS - K8s-as-a-service on cloud for very small teams
o Abstracting your infra - Separates developer from machine (portability across machine/clouds)
o Efficiency 
  - Abtraction aids thought-process
  - Mchine used optimally (better utilization)
  - Cheap to create test/development environments with namespace (test/dev)
