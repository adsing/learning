UNIX DIR
===========
OS device tree (/dev)
OS configuration (/etc)
executeables (/bin, /sbin)
shared libraries (/lib, /usr/lib, /lib64, /usr/lib64)
optional packages (/opt)

kernel (/sys)
kernel boot (/boot)

running process tree (/proc)
temporary files (/tmp)
log files (/var)

/usr -- which is used to hold executables (/usr/bin), libraries (/usr/lib), and shared support files (/usr/share)

home directories (/home) .

Citadel specific:
/auto - NFS mount
/opt/citadel/ -- 3rd party

From <https://wiki/display/ADST/Linux+101> 

Boot sequence: load kernel into memory; init OS; system service apps come up (LDAP, NTP, DNS); other apps (web server & database server; networking; firewall; X display manager etc) & final - display login prompt.
Logon on box or remotely - launches a shell (env, PATH for binaries & LD_LIBRARY_PATH for libraries)


SET options
=============
#!/bin/bash
set -u     #error on unbound users (set -o nounset)
set -e     #exit on. lose $? (set -o errexit)
set -o pipefail  # false | true returns false no

GoodCommand
BadCommand  #stops here
GoodCommand
GoodCommand


rsynch
==========
Efficient local/remote copy mechanism: # rsync options source destination

• -v : verbose
• -r : copies data recursively (but don’t preserve timestamps and permission while transferring data
• -a : archive mode, archive mode allows copying files recursively and it also preserves symbolic links, file permissions, user & group ownerships and timestamps
• -z : compress file data
• -h : human-readable, output numbers in a human-readable format

Copy/Sync a File locally : rsync -zvh backup.tar /tmp/backups/
Copy/Sync a Dir locally : rsync -azvh somedir/folder /tmp/backups/
Copy/Sync a Dir Remotely: rsync -avz rpmpkgs/ root@192.168.0.101:/home/
Copy/Sync a Dir from remote: rsync -avz root@192.168.0.101:/home/ rpmpkgs/ 
Copy/Sync a Dir from remote over SSH: rsync -avzhe ssh root@192.168.0.100:/root/install.log /tmp/

include/exclude files:rsync -avze ssh --include 'R*' --exclude '*' root@192.168.0.101:/var/lib/rpm/ /root/rpm

Delete destination dir/file if not in source : rsync -avz --delete root@192.168.0.100:/var/lib/rpm/ .

Delete source file when sync is done: rsync -avz --remove-source-files root@192.168.0.100:/var/lib/rpm/ .

From <https://www.tecmint.com/rsync-local-remote-file-synchronization-commands/> 



UNIX PROFILES
===============
System wide
	• /etc/environment: specifically meant for environment variables
	• /etc/env.d/*: environment variables, split in multiple files
	• /etc/profile: all types of initialization scripts
	• /etc/profile.d/*: initialization scripts
	• /etc/bashrc, /etc/bash.bashrc: meant for functions and aliases
User specific
	• ~/.bash_profile: initialization for login (bash-)shells
	• ~/.bashrc: initialization for all interactive (bash-)shells
	• ~/.profile: used for all shells
	• ~/.cshrc, ~/.zshrc, ~/.tcshrc: similar for non-bash shells

From <https://unix.stackexchange.com/questions/813/how-to-determine-where-an-environment-variable-came-from/154971#154971> 



PS
===
See processes under a PID (groups of processes from fork)
#> ps f -g 0  
PID TTY      STAT   TIME COMMAND
2 ?        S      0:00 [kthreadd]
3 ?        S      0:01  \_ [ksoftirqd/0]
7 ?        S      0:19  \_ [rcu_sched]

From <https://unix.stackexchange.com/questions/264522/how-can-i-show-a-terminal-shells-process-tree-including-children> 

#Detach a process
Cntrl+Z to detach
bg to set it running on background

$ some_long_running_cmd_running_on_terminal
$
^Z
[1]+  Stopped                 ./1.sh

$ jobs
[1]+  Stopped                 ./1.sh

$ bg 1
[1]+ ./1.sh &

$ jobs
[1]+  Running                 ./1.sh &



KILL
======
Kill smart way:
kill -HUP <application_pid>
# check if application is still running
kill -INT <application_pid>
# check if application is still running
kill -KILL <application_pid>
From <https://unix.stackexchange.com/questions/19474/how-to-soft-kill-gui-applications-via-terminal> 


Kill all spawned children.

kill -TERM <parent pid>

pgrep -f  test.py
pkill -f  test.py



X11 forwarding
==============
Install VcXsrv
Enable X11 forwarding in the SSH setup through Putty/Mobiterm.
Test by starting xterm in bg. (% xterm bg)

Xterm configs in ~/.Xresources
xterm*Background: black
xterm*Foreground: white

xrdb -merge ~/.Xresources
From <https://www.linuxquestions.org/questions/debian-26/how-to-change-background-and-fonts-color-in-xterm-156290/page2.html> 



SSH SCP
========
	1. Generate public/private (id_rsa.pub/id_rsa) key files ()
	2. Copy the public key to another's host ssh authorised file ($ ssh-copy-id asingh5@host2)\
	3. Copy around files ($ scp local_file asingh5@host2:/tmp  -or $ scp asingh5@host1:/tmp/file asingh5@host2:/tmp/file)


Test ssh server with telnet (port 22):
 $ telnet oats-sftp.finra.org 22
Trying 75.98.61.43...
Connected to oats-sftp.finra.org.
Escape character is '^]'.
^]
telnet> close



GNU Parallel
===============
parallel --dryrun -j32 -k --nice 20 --load 50% --noswap --resume-failed --joblog /tmp/parallel.log --results outdir -a input_dates.dat echo  #remove /tmp/parallel.log when done

seq 3 | parallel --dryrun "echo {} {.}"

{} -- input
{.} -- input without filename ext
{#} -- input # (1,2,3…)
{/} -- removes the path; keeps filename only
{//} -- keeps the path; removes filename 
{/.} -- keeps the filename without extension; removes path & extension


parallel --dryrun -a input_dates.dat echo  #reach date one-by-one in file and run cmd echo .. Can read mutiple -a file … cross product

parallel echo ::: arg1 arg2 arg3  #run echo for each arg
parallel echo prefix-{} ::: arg1 arg2 arg3  #run echo for each arg with prefix "prefix-"
cat data.dat | parallel echo  #run echo for each line in file  .. Or cat data.dat | parallel -a echo

parallel --colsep '\t' echo 1={1} 2={2} :::: tsv-file.tsv  #From <https://www.gnu.org/software/parallel/parallel_tutorial.html> 


#keep order in output, (j) jobs to run in parallel (here 2)
parallel -j2 -k 'printf "%s-start\n%s" {} {};
    sleep {};printf "%s\n" -middle;echo {}-end' ::: 4 2 1    

#save output to files in /var/tmp
 parallel --tmpdir /var/tmp --files echo ::: A B C

#save stdout, stderr in outdir
parallel --results outdir echo ::: A B C   #outdir/1/A/stderr + stdout + seq (input)… outdir/2/B/stderr + stdout + seq (input)

#delay starting each job (IO or CPU intensive)
parallel --delay 2.5 echo Starting {}\;date ::: 1 2 3

#progress
parallel --progress sleep ::: 1 3 2 2 1 3 3 2 1


#joblog & reumse failed jobs
  parallel --joblog /tmp/log exit  ::: 1 2 3 0
  cat /tmp/log
  parallel --resume --joblog /tmp/log exit  ::: 1 2 3 0 0 0  #parallel stopped and resume again from point of break
  parallel --resume-failed --joblog /tmp/log exit  ::: 1 2 3 0 0 0 #restart failed jobs

#limit resource (CPU/mem/swap/nice)
parallel --load 100% echo load is less than {} job per cpu ::: 1
parallel --noswap echo the system is not swapping ::: now
parallel --memfree 1G echo will run if more than 1 GB is ::: free   #jobs killed due to mem-limit are put back in queue
parallel --nice 17 echo this is being run with nice -n ::: 17


#running on another server
parallel -S username@$SERVER1 echo running on ::: username@$SERVER1



PGP encryption
===============
USER-ID : Aditya Singh (asingh5) <aditya.singh@citadel.com>
Passphrase: Citadel!

#generate public-private RSA key (does not expire, Name, Email, Comment)
#keys are created in ~/.gnupg
$ gpg --gen-key

$ gpg --list-secret-keys --keyid-format LONGC
/home/asingh5/.gnupg/secring.gpg
--------------------------------
sec   2048R/3EE70D2AB4CEF2D8 2019-03-25
uid                          Aditya Singh (asingh5) <aditya.singh@citadel.com>
ssb   2048R/7A227001895FA33D 2019-03-25

$ gpg --gen-revoke (store hard copies of your keys & certificate)

#encrypt a file
$ gpg -e -r "Aditya Singh <aditya.singh@citadelsecurities.com>" <some file>
$ gpg -e -r "Aditya Singh (asingh5) <aditya.singh@citadel.com>" <some file>

#decrypt a file
$ gpg -o <decrypted file> -d <encrypted filename>

#generate your certificate pub-key that you can share with others
$ gpg --armor --export "Aditya Singh (asingh5) <aditya.singh@citadel.com>"  public_key.asc 

#share key with others (email public_key.asc or upload to keyserver in gpg.conf)
$ gpg --send-key "Aditya Singh (asingh5) <aditya.singh@citadel.com>"

#receive key from file
$ gpg --import users.pubkey.gpg

#receive key from key-server ($gpg search "Aditya Singh (asingh5) <aditya.singh@citadel.com>" on key server)
$ gpg --recev-keys <8-hex ID>

#after receiving, check if key is authentic by checking fingerprint and out-of-band (email/phone) to confirm it matches
$ gpg --fingerprint <their UID>

#delete a key
$ gpg --delete-key <UID>
gggggggg
~/.gnupg
 - gpg.conf
 - secring.gpg (secure key-ring)
 - pubring.gpg (public key-ring)
 


APACHE Authentication
=====================
https://httpd.apache.org/docs/2.2/howto/auth.html
Basic auth - https://wiki.apache.org/httpd/PasswordBasicAuth
Kerberos - https://kb.iu.edu/d/aumh
Degang - http://cqs-wiki/display/DM/Set+up+Kerberos+authentication+to+connect+to+SQL+Server

APACHE WWW- Access logs
=======================
cut -f1 -d'-' ~/apache_httpd/logs/access_log | sort | uniq -c | awk -F' ' '{print $2, $1}' 

TTY MULTIPLEX
==============
TMUX
----
# session management
tmux ls (or tmux list-sessions)
tmux new -s session-name
Ctrl-b d Detach from session
tmux attach -t [session name]
tmux kill-session -t session-name
tmux detach-client -s [session name]


Ctrl-b s (List all sessions)
Ctrl-b $ (rename session)
Ctrl-b d (detach session)

Ctrl-b c Create new window
Ctrl-b & Kill the current window
Ctrl-b , Rename the current window
Ctrl-b ? List all keybindings
Ctrl-b w Tree of all windows and each pane in those windows


# moving between windows
Ctrl-b n (Move to the next window)
Ctrl-b p (Move to the previous window)
Ctrl-b l (Move to the previously selected window)
Ctrl-b w (List all windows / window numbers)
Ctrl-b window number (Move to the specified window number, the
default bindings are from 0 -- 9)

# Tiling commands
Ctrl-b % (Split the window vertically)  Ctrl-b + |
Ctrl-b " (Split window horizontally)  Ctrl-b + -
Ctrl-b x (close pane)
Ctrl-b ! (make pane into a new window)
Ctrl-b z zoom into pane (full window now; toggle with z)
Ctrl-b q (Show pane numbers, when the numbers show up type the key to go to that pane)
Ctrl-b (arrow-key)  Move between panes
Ctrl-b o Switch to the next pane (or Ctrl+B and arrow keys)
Ctrl+b O -- move all panes clock-wise
Ctrl-b { (Move the current pane left)
Ctrl-b } (Move the current pane right)

#restart a dead pane (select the dead pane)
CTRL+b   : respawn-pane -k
From <https://unix.stackexchange.com/questions/88392/is-there-an-easy-way-to-restart-a-tmux-pane> 

# Make a pane its own window
Ctrl-b : "break-pane"

#copy-paste
Enter copy mode with (Ctrl-b + [). Cntrl+Space to start highlight and Alt+W to end highlight.
Cntrl-b + ] to paste

# ~/.tmux.conf
  bind | split-window -h -c "#{pane_current_path}"
  bind _ split-window -v -c "#{pane_current_path}"
  set -g mouse on
  # List of plugins
  set -g @plugin 'tmux-plugins/tpm'
  set -g @plugin 'tmux-plugins/tmux-sensible'
  # Other examples:
  # set -g @plugin 'github_username/plugin_name'
  # set -g @plugin 'github_username/plugin_name#branch'
  # set -g @plugin 'git@github.com:user/plugin'
  # set -g @plugin 'git@bitbucket.com:user/plugin'
  # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
  run '~/.tmux/plugins/tpm/tpm'


From <https://www.youtube.com/watch?v=BHhA_ZKjyxo> 


SCREEN
-------
$ screen

Ctrl^A + c -- create
Ctrl^A + n -- next
Ctrl^A + S -- split screen horizontally
Ctrl^A + TAB -- move between split screen (start new session Ctrl^A+c --or-- go to other session with Ctrl^A +n)

Ctrl^A + | -- split screen veritcally



LSOF - list open files
======================
Files currently being used:

lsof +r 3 -f --'/home/asingh5/docs/temp/ping.txt'
#returns -1 if file is not in use

RENAME MANY FILES
=================
for f in *xlsx; do echo mv $f "$(basename $f .xlsx).xls"; done



DELETE OLD FILEs
=================
find / -name .DS_Store -print0 | xargs -0 rm

find / -name .DS_Store -exec rm {} +

#better than
find / -name ".DS_Store"  -exec rm {} \;

From <http://unix.stackexchange.com/questions/167823/find-exec-rm-vs-delete> 



find /home/a -mtime +15 -exec ls -l {} \;

From <http://www.guguncube.com/957/unix-delete-files-older-than-a-certain-number-of-days> 



find . -name "*.txt" -print0 | while read -d $'\0' file
do
   blah, blah, blah
done
From <http://stackoverflow.com/questions/9612090/how-to-loop-through-file-names-returned-by-find> 
NEVER do this:  for file in $(find . -name "*.txt")
BECAUSE: 1. loop must first complete. 2. white space in filename will treat is as 2 separate names.


Files older than 2 mins:
find /home/asingh5/docs/temp/ping.txt -newermt '2 mins ago' | wc -l



STAT file
=========
Change access/modified time of a file
$ touch -a -m -t 201801012359.59 /auto/cesiqload/README.txt

$ ls -l /auto/cesiqload/README.txt
-rw-r--r-- 1 s_cesrpt development 369 Jan  1  2018 /auto/cesiqload/README.txt

$ stat /auto/cesiqload/README.txt
  File: `/auto/cesiqload/README.txt'
  Size: 369             Blocks: 16         IO Block: 262144 regular file
Device: 33h/51d Inode: 1686665     Links: 1
Access: (0644/-rw-r--r--)  Uid: ( 1540/s_cesrpt)   Gid: (   11/development)
Access: 2018-01-01 23:59:59.000000000 -0600
Modify: 2018-01-01 23:59:59.000000000 -0600
Change: 2016-08-24 09:33:29.000010000 -0500



ARP - Address resolution protocol
===================================
#shows the cached MAC address
$ arp -a
ld-chces15.citadelgroup.com (10.15.119.49) at a0:48:1c:b9:c5:f0 [ether] on bond0
ld-chces14.citadelgroup.com (10.15.119.48) at a0:48:1c:b9:ca:70 [ether] on bond0
chi-dbn-qr-acc19-vl119.citadelgroup.com (10.15.119.1) at 00:2a:6a:fa:3e:bc [ether] on bond0



NETSTAT
=======
List all network statistics (all socket connections tcp/udp/unix - active/listening)

$ netstat -at
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State      
tcp        0      0 enlightened:domain      *:*                     LISTEN     
tcp        0      0 localhost:ipp           *:*                     LISTEN     
tcp        0      0 enlightened.local:36310 del01s07-in-f24.1:https ESTABLISHED
tcp        0      0 enlightened.local:45038 a96-17-181-10.depl:http ESTABLISHED
tcp        0      0 enlightened.local:37892 ABTS-North-Static-:http ESTABLISHED
.....

#(a)ll, (t)cp, (u)dp, (l)istening, (p)rocess name/id, (e)xtended info like user/inode
Grep for LISTEN/ESTABLISHED/http/ntp

Print statistics (-st for tcp specific)
$ netstat -s
Ip:
    32797 total packets received
    0 forwarded
    0 incoming packets discarded
    32795 incoming packets delivered
    29115 requests sent out
    60 outgoing packets dropped
Icmp:
    125 ICMP messages received
    0 input ICMP message failed.
    ICMP input histogram:
        destination unreachable: 125
    125 ICMP messages sent
    0 ICMP messages failed
    ICMP output histogram:
        destination unreachable: 125
... OUTPUT TRUNCATED ...

Display (kernel) routing info
$ netstat -rn
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
0.0.0.0         192.168.1.1     0.0.0.0         UG        0 0          0 eth0
192.168.1.0     0.0.0.0         255.255.255.0   U         0 0          0 eth0
$netstat -rn
Kernel IP routing table
Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
10.32.242.0     0.0.0.0         255.255.255.0   U         0 0          0 bond0
0.0.0.0         10.32.242.1     0.0.0.0         UG        0 0          0 bond0

Network Interfaces:
$netstat -i
Kernel Interface table
Iface       MTU Met    RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
bond0      1500   0 219215904      0      0      0 230840408      0      0      0 BMmRU
eth0       1500   0 218950263      0      0      0 230840408      0      0      0 BMsRU
eth1       1500   0   265641      0      0      0        0      0      0      0 BMsRU
lo        16436   0 51354919      0      0      0 51354919      0      0      0 LRU

Group info for IPv4/v6:
$netstat -g
IPv6/IPv4 Group Memberships
Interface       RefCnt Group
--------------- ------ ---------------------
lo              1      all-systems.mcast.net
bond0           1      239.0.26.114
bond0           2      239.0.2.60
bond0           1      239.0.4.22
bond0           1      all-systems.mcast.net

Continuous update:
$netstat -ct          #tcp only

Watch list of active TCP connections:
$watch -d -n0 "netstat -atnp | grep ESTABLISH"


TCP processes:

$ netstat -apn | grep tcp | grep LISTEN | grep Per
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
tcp        0      0 0.0.0.0:20201               0.0.0.0:*                   LISTEN      14724/./Persistence


UDP processes:

$ netstat -apn | grep udp | grep LISTEN 
(Not all processes could be identified, non-owned process info
 will not be shown, you would have to be root to see it all.)
udp        0      0 0.0.0.0:12352               0.0.0.0:*                               -
udp        0      0 0.0.0.0:708                 0.0.0.0:*                               -


Network Card capacity
====================
$ ifconfig    # shows 2 network card bonded to single interface (backup n/w card)
bond0 ..
eth 4 ..
eth 5 ...
lo  (loopback)

$ ethtool bond0
# Speed = 10000Mb/s = 10Gb/s
$ ethtool eth4
# Speed 10000Mb/s = 10Gb/s
# Supported Link modes: 100baseT/Full, 1000baseT/Full (1Gb capacity) so real capacity is limited to eth card of 1GB (end-of-life 2020)

AWK
===

Count fields in line & print line #:
awk '{ FS = ","; } ; { print NF, count; count=count+1;}'
awk '{ FS = "|"; } ; { print NF, count; count=count+1;}' /home/s_cesprd/prod/temp/new_CESTransactions.dat | grep -v "^81"

awk '{ FS = "%"; } ; { print NF, count; }' /home/s_cesrpt/prod/temp/20160627.otc_prop_trades| sort | uniq -c
awk '{ FS = "%"; } ; { print NF, count; count=count+1; }' /home/s_cesrpt/prod/temp/20160627.otc_prop_trades| grep -v 38

head -2 CDRG_EQT_20160219_Orders.txt.sample | awk -F "|" '{print NF-1}
 ....useful for bcp data transfer check etc.

Sum of a column:
awk -F',' '{ sum+=$1} END {print sum}'

Sum of column 2, group by column 1:
awk -F, '{a[$1]+=$2;}END{for(i in a)print i","a[i];}' 

http://www.theunixschool.com/2012/06/awk-10-examples-to-group-data-in-csv-or.html



RESOURCE MONITORING
=====================
ulimit -- Account limits on memory/files:

lx-njnasd-hfpo02:/logs/rrts $ id
uid=5728(s_fixuser) gid=111(star) groups=111(star),11(development),706(qls_e)

lx-njnasd-hfpo02:/logs/rrts $ ulimit -a |grep mem
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
virtual memory          (kbytes, -v) unlimited


sar:to monitor memory/swap space
1. $ sar -r -s 10:24:00          #monitor memory from 10:24 today
2. $ sar -S -s 10:24:00          #monitor swap space from 10:24 today
3. $sar -r -s 23:24:00 -f /var/log/sa/sa09     #monitor memory from 23:24 for a historical date (11/09)
4. /usr/local/bin/pdctop 10:24   #get a top-like interface at 10:24am







PDC -- takes snapshot every few seconds.

[s_cesprd@lx-chcesp01]::[/home/s_cesprd]=>ps -ef | grep pdc
s_cesprd  5694  5106  0 17:58 pts/27   00:00:00 grep pdc
root     10484     1  0 Apr25 ?        00:13:41 /usr/bin/perl /usr/local/sbin/pdc3d --syslog
root     28153 10484  0 00:04 ?        00:01:29 /usr/local/sbin/ps.pdc3 -eww --repeat 10 --format ppid,pcpu,pmem,uid,stat,rss,vsz,nlwp,pid,ucmd,command


[s_cesprd@lx-chcesp01]::[/home/s_cesprd]=>pdc3 --format=memhog | tail
# Top processes (by RSS) at Thu Apr 30 17:57:24 2015
# RAM%    CPU% PID    User             Command
18.00% 100.00% 9548   cesroot          /home/cesroot/bin/optionXGateway_exe -csAppName CIGOPTXGateway -csFamily US_OMM
 1.20%   0.00% 12596  s_cesprd         /cigprod64/ces/zap/zap_cesprd/bin/zaplet_cesprd --cfgs:ctx CES.CES_US --cfgs:app Zaplet --cfgs:name Zaplet --cfgs:dir /cigprod64/ces/zap/zap_cesprd/config
 0.90%   0.00% 10713  cesroot          /auto/ces_ort/cestp/mysql/bin/mysqld --basedir=/auto/ces_ort/cestp/mysql
# Top processes (by RSS) at Thu Apr 30 17:57:34 2015
# RAM%    CPU% PID    User             Command
18.00% 100.00% 9548   cesroot          /home/cesroot/bin/optionXGateway_exe -csAppName CIGOPTXGateway -csFamily US_OMM
 1.20%   0.00% 12596  s_cesprd         /cigprod64/ces/zap/zap_cesprd/bin/zaplet_cesprd --cfgs:ctx CES.CES_US --cfgs:app Zaplet --cfgs:name Zaplet --cfgs:dir /cigprod64/ces/zap/zap_cesprd/config
 0.90%   0.00% 10713  cesroot          /auto/ces_ort/cestp/mysql/bin/mysqld --basedir=/auto/ces_ort/cestp/mysql


[root@lx-njnasd-hfpo02 ~]# pdc3 --format=memhog --time='04/17/2015 16:48:14 -0500'
#### Memhogs report for lx-njnasd-hfpo02
# Top processes (by RSS) at Fri Apr 17 16:48:23 2015
# RAM%    CPU% PID    User             Command
81.59%   0.10% 10605  s_fixuser        /cigprod64/eramsv/po/6.2/bin/rh5a64g4/postOffice_exe -P*********** -SSPPOST1 -Us_bkrcon -n cesorders_postdb -c /logs/rrts/.//postOffice-log.20150417.SYB -d 04/17/2015 -a /logs/rrts/.//idAllocation.cfg
15.30%  87.50% 13370  s_fixuser        /cigprod64/eramsv/po/6.2/scripts/postOfficeSybBcpFlat.pl -d /logs/rrts/./ -f /logs/rrts/.//postOffice-log.20150417.SYB -S IQPGMQS1 -H chpohost -B /dataprod/eramsv/po/IQ_BCP/cesorders_postdb/ -U s_bkrcon -P ****** -I cesorders_postdb
0.00%   0.10% 3498   nobody           ./node64/bin/node ./startup.js   


Running /usr/local/bin/pdc3 --format=memhog --time="10:30"
#### Memhogs report for ld-chces06
# Top processes (by RSS) at Tue May 19 10:30:05 2015
# RAM%    CPU% PID    User             Command
56.50%  14.40% 19065  s_cesqa          /auto/cesqa/devqa/APPS/mvs/mvs_ng_stabledev/bin/mvs -X MVS_NG_STABLEDEV -k CES -s 42035 -V current -z TEST_CES_MVS_NG_STABLEDEV_ld-chces06
22.20%   0.00% 19744  s_cesqa          /auto/cesqa/devqa/APPS/queryservice/queryservice_fix_archive_2/bin/queryservice -c /auto/cesqa/devqa/APPS/queryservice/queryservice_fix_archive_2/config/queryservice_fix_archive_2.xml
17.30%   0.00% 19782  s_cesqa          /auto/cesqa/devqa/APPS/queryservice/queryservice_fix_archive_3/bin/queryservice -c /auto/cesqa/devqa/APPS/queryservice/queryservice_fix_archive_3/config/queryservice_fix_archive_3.xml
2.80%   2.00% 19710  s_cesqa          /auto/cesqa/devqa/APPS/queryservice/queryservice_ces_tc_otc_ord/bin/queryservice -c /auto/cesqa/devqa/APPS/queryservice/queryservice_ces_tc_otc_ord/config/queryservice_ces_tc_otc_ord.xml
 
Running /usr/local/bin/pdc3 --format=cpuhog --time="10:30"
#### CPUhogs report for ld-chces06
# Top 10 processes (by %CPU) at Tue May 19 10:30:05 2015
# CPU%    RAM% PID    User             Command
14.40%  56.50% 19065  s_cesqa          /auto/cesqa/devqa/APPS/mvs/mvs_ng_stabledev/bin/mvs -X MVS_NG_STABLEDEV -k CES -s 42035 -V current -z TEST_CES_MVS_NG_STABLEDEV_ld-chces06
2.00%   2.80% 19710  s_cesqa          /auto/cesqa/devqa/APPS/queryservice/queryservice_ces_tc_otc_ord/bin/queryservice -c /auto/cesqa/devqa/APPS/queryservice/queryservice_ces_tc_otc_ord/config/queryservice_ces_tc_otc_ord.xml
0.30%   0.20% 19691  s_cesqa          /auto/cesqa/devqa/APPS/queryservice/queryservice_ces_tc_otc_exec/bin/queryservice -c /auto/cesqa/devqa/APPS/queryservice/queryservice_ces_tc_otc_exec/config/queryservice_ces_tc_otc_exec.xml
 
Running /usr/local/bin/pdc3 --format=instances --time="10:30" --xfilter=executable:zabbix_agentd --xfilter=executable:mingetty
#### Instances report for ld-chces06
# Top multi-instance executables at Tue May 19 10:30:05 2015
#Procs Thr/Proc Executable
31     1.0      sshd
9      1.0      ksh
6      1.0      ssh
6      1.0      sh
5      1.0      bash
4      1.0      sftp-server
4      17.5     queryservice
3      1.0      crond



LDD missing .so file
=======================
< ~ >ldd /tp64/r-project/3.1.2/lib64/R/bin/exec/R
        linux-vdso.so.1 =>  (0x00007fff61ffd000)
        libR.so => not found
        libRblas.so => not found
        libgomp.so.1 => /usr/lib64/libgomp.so.1 (0x0000003581e00000)
        libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003582200000)
        libc.so.6 => /lib64/libc.so.6 (0x0000003581200000)
        librt.so.1 => /lib64/librt.so.1 (0x0000003585e00000)
        /lib64/ld-linux-x86-64.so.2 (0x0000003580e00000)


CRONTAB
=======
MAILTO=asingh5
#minute hour dom month dow command                                                                                                                                                                                  
59 23 * * 1-5 DT=`date +\%y\%m\%d` &&  grep 'addBorrow ' file


UNIX VERSION
=============
Redhat version 6.4 for 64-bit architecture is installed on ld-chces10 machine
< ~ >uname -a  
Linux ld-chces10 2.6.32-358.18.1.el6.x86_64 #1 SMP Fri Aug 2 17:04:38 EDT 2013 x86_64 x86_64 x86_64 GNU/Linux

< ~ >cat /etc/redhat-release
Red Hat Enterprise Linux Server release 6.4 (Santiago)
< ~ >hostname
ld-chces10

VI
===
TABS:
expand tabs to space(4 char)
:set expandtab ts=4 sw=4 ai

You can replace all the tabs with spaces in the entire file with
:%retab

set autoindent noexpandtab tabstop=4 shiftwidth=4
From <https://stackoverflow.com/questions/3682582/how-to-use-only-tab-not-space-in-vim> 


#to see special chars
:set list

Tab multiple lines:
Esc+V (visual mode)
Select lines with arrow kets
Esc+. (dot) to tab


Insert tab into a vi selection by line-number
:10,200:s/^/\t/

Indentation:
 right :: 5>>
 left   :: 5<<


Split screen
:sp       (hortz split)
:vsplit (vertical split)
Ctrl-w + arrow to move around





vimdiff
=========

do - Get changes from other window into the current window.
dp - Put the changes from current window into the other window.
]c - Jump to the next change.
[c - Jump to the previous change.
Ctrl W + w - Switch to the other split window (CTRL-W CTRL-W does the same
thing, in case you let go of the CTRL key a bit later)

Pasted from <http://stackoverflow.com/questions/5288875/vimdiff-what-are-the-most-frequently-used-commands-shortcuts-that-could-get-a-n> 

:set diffopt+=icase - ignore casedo]c

:diffupdate - recompute diff

:colorscheme slate   #to get around the yucky color diffs


:syntax off  #turn off syntax highlight will let you see through the pink lines

Other options:
	1. ~/.vimrc
	if &diff
    colorscheme evening
endif
	
	From <https://stackoverflow.com/questions/2019281/load-different-colorscheme-when-using-vimdiff> 
	
	2. 
~/.vim/colors/mycolorsheme
From <https://stackoverflow.com/questions/2019281/load-different-colorscheme-when-using-vimdiff> 


CURL -- WGET
=============
curl --trace-ascii debug.txt --trace-time http://example.com/ -o output.html
curl: (18) transfer closed with outstanding read data remaining
$ echo $? # 18


DISK USAGE
===========
$ du -khsc  TB_EQUITY_CESE/TB_EQUITY_CESE.20180301.*

#larges files/directories
cd $HOME; du -x . | sort -n | tail -30

#du  & df can be off if open files are deleated (inodes still in use by process) or if you are on a quota file where others have exhausted the filesystem (contact storage if this happens)
 10485760      1082368     9403392  11% /home/s_cesrpt
1057293312    333362688   723930624  32% /auto/ces_reports
259176704    124054272   135122432  48% /auto/cesrpt
524288000     14207488   510080512   3% /auto/mm_scratch_s_cesrpt
1.1G	/home/s_cesrpt
From <http://lx-ilch4-cesrep01:47771/jobinspect?cmd=Output&id=SpaceCheck&purl=%2Fjob%3Fid%3DSpaceCheck&user=asingh5&token=284293&pid=6469> 


$ du -khs /home/s_cesrpt
$ df -kh | grep cesrpt 



PORT FORWARDING
================
LocalForward (when you want to connect to a remote service):
#connect to jupyter on ld-chces15:12345 when jupyter service runs on ld-chces16:12345
ld-chces15$ ssh -L ld-chces15:12345:ld-chces16:12345 asingh5@ld-chces16  (local is ld-chces15 12345 -> remote is ld-chces16 12345)

To confirm this:
$netstat -apn | grep 12345

RemoteForward (when you run a service and want to appear to run on a remote server:9090 port)
ld-chces15$ ssh -R ld-chces15:12345:remote_server:9090 user@remote_server (when people connnect to remote_server:9090 -> request fwd to ld-chces15:12345


SHELL SCRIPTING
=================
Config control :: define variables in separate .sh file and do (. .myconf.sh) to have those variables in existing script.

Quoting = 'Hello $VAR' #single quote not interpretted
"Hello $VAR" #VAR interpretted
`ls -l $VAR`    #execute

read VAR  #get user input
echo $VAR

#read only var  (like $1, $2, $#)
declare -r READONLY=Y
echo $READONLY
READONLY=N    #can't do this

echo $?  #return code of last command … useful for error checking

Command line args: $1, $2… ${10}, ${11} … $0 is scriptname…shift causes args to shift-left
$#       #number of arg variables excluding $0. So if $# = 2 then we have $1 and $2 
$@     #treat input args as list  ($@ or "$@" produce a list)
$*       #treat input args as string  "$*" is single string
Recommend to use "$@" .. Safe to pass variables around esp if they contain * or space like 'a b'

for x in "$*"
do
  echo $x
done

Command substitution :: $(cmd)  or `cmd`
ls -l $(which vim)   #$() can be nested
ls -l `which vim`

Calculator :: (( .. ))
COUNTER = $(( COUNTER * 10 ))
while true             #while [ $counter -gt 0 ]
do
   COUNTER = $(( COUNTER - 1 ))
   echo "$COUNTER  seconds remaining"
done

test expression or [ expression ]: test any expression, file types or compare values
EXPRESSION1 -a EXPRESSION2 (and, -o or, ! EXPR)
STRING #non-zero (- n)
-z STRING #zero length tring
STR1 = STR2 (=, !=)
INT1 -eq INT2 (-le, -ge, -lt, -gt)
FILE1 -nt FILE2 (newer than, -ot)
-d FILE (is dir, -b, -c, -e , -f , -h, 

Logical (&& and, || or)
[ -d /etc ] && echo "dir exists"
[ -d /fake ] || echo "dir NOT exists"

Pattern matching:   #regex should be in single quotes to avoid escaping
* - entire string
? - single char
[a-z] - small char … [^a-z] or [! a-z] :: not a-z
[[:class:]] - where class can be alpha, alnum, ascii, diigt, xdigit, blank, punct, space, word, lower, upper
[.SYMBOL.] where SYMBOL like backslash, vertical-line, exclamation-mark
filename =${1##*/}      #ignore anything in front of /, ## means the longest, # means shortest
dirname =${1%/*}        #% first from right to left…ignore anything till you encounter /

Function
foo() {
  COUNTER = $(( COUNTER - 1 ))
   sleep 1
}

while [ $COUNTER -gt 0 ]; do
  echo "Time left: $COUNTER"
  foo()
done

[ $COUNTER = 0 ] && echo "time is up"
[ $COUNTER = "-1" ] && echo "time is negative"

while true 
do 
  echo "you now are ${COUNTER#*-} seconds late"  #pattern match with ${COUNTER#*-} to remove -ive sign
  minusone 
done

Debug scripts:
bash -x myscript.sh arg1 arg2  #prints variables

Loop examples:
if  cmd  like cut -d: -f1 /etc/passwrd | grep "^$1$" > /dev/null 
then 
  …
else
   …
fi

if [[ $# -eq 2 ]]; then  #-eq for numbers, "$a" == "$b" for strings
    oatsDesk=$2
    echo "Loading OATS for $oatsDesk only"
    if [[ "$oatsDesk" != "CCMX" ]] && [[ "$oatsDesk" != "CEMM" ]] && [[ "$oatsDesk" != "CDGO" ]] && [[ "$oatsDesk" != "APOG" ]]; then
        echo "Desk $oatsDesk Invalid."
        exit 1
    fi
fi

if [ "$oatsDesk" == "CEMM" -o "$oatsDesk" == "ALL" ]; then
    ### Wait for CEMM completion file flag ###
    upper=$(date +%s --date="20:05")
    while true; do
	    if [ -f "$cemm_oats_complete" ]; then
	        echo "$cemm_oats_complete found!"
	        /bin/date
	        break
	    else
	        echo "Waiting for CEMM file"
	        curr_time=$(date +%s)
	        if [ "$curr_time" -gt "$upper" ]; then
	            echo "File $cemm_oats_complete still not ready after 8:05pm. Time: $(date)" | mailx -s "Firmwide OATS Files Late" $recips
	        fi
	    fi
	    sleep 300
	done


function log_msg {
  echo `/bin/date +"%Y-%m-%d %H:%M:%S"` ": " $1
}
log_msg "Running for trade date : $date"

USAGE=":d:cnrax"
hostname=`/bin/hostname`
the_date=""
copyhost="lp-dbn-boval006"
regen_coes=0
regen_nscc=0
regen_recon=0
just_print_date_and_exit=0
while getopts "$USAGE" opt
do
    case $opt in
    d)
        the_date=$OPTARG
    ;;

    c)
        regen_coes=1
    ;;

    n)
        regen_nscc=1
    ;;

    r)
        regen_recon=1
    ;;

    a)
        regen_coes=1
        regen_nscc=1
        regen_recon=1
    ;;

    x)
        just_print_date_and_exit=1
    ;;

    esac
done



EXPECT
========
Expect  is  a program that "talks" to other interactive programs according to a script. 

Following the script, Expect knows what can be expected from a program and what the correct response should be.  An interpreted language provides branching and high-level control structures to direct the dialogue.  In addition, the user can take control and interact directly when desired, afterward returning control to the script.


/usr/bin/expect<<EOD
set timeout -1
spawn sftp $uploadUser@$host

expect "Password:"
send "$uploadPass\n"

expect "sftp>"
send "mput oats_$oatsDesk*.$today*.gz\n"

expect {
    "sftp>" {
        send "bye\n"
    }
    -re "(.*)disconnect" {
        puts "Disconnected from server, exiting and retrying\n"
        exit
    }
}
exit
EOD



#!/usr/bin/expect
set timeout 9
set username [lindex $argv 0]
set password [lindex $argv 1]
set hostname [lindex $argv 2]
log_user 0
if {[llength $argv] == 0} {
  send_user "Usage: scriptname username \'password\' hostname\n"
  exit 1
}
send_user "\n#####\n# $hostname\n#####\n"
spawn ssh -q -o StrictHostKeyChecking=no $username@$hostname
expect {
  timeout { send_user "\nFailed to get password prompt\n"; exit 1 }
  eof { send_user "\nSSH failure for $hostname\n"; exit 1 }
  "*assword"
}
send "$password\r"
expect {
  timeout { send_user "\nLogin failed. Password incorrect.\n"; exit 1}
  "*\$ "
}
send_user "\nPassword is correct\n"
send "exit\r"
close

From <https://www.pantz.org/software/expect/expect_examples_and_tips.html> 


#!/usr/bin/expect --
#Notify you when mkdvd needs another DVD inserted and when completed.   
#Specify mkdvd command line as argument to this script.
#For example, ./mkdvdnotify mkdvd -d /dev/cd0 -m /mksysb .....
set timeout -1
puts "Running command:  $argv"
eval spawn $argv

while true {
    expect {
        "The backup will require an additional CD or DVD" {
            exec ##Put command line here to email you/page you that we need another DVD
            puts "Need to insert additional CD/DVD"
            interact "\r" return
            send "\r"
        }
        eof {
            exec ##Put command line here to email you/page you that mksysb is done
            puts "mksysb command completed"
            break
        }
    }
} 

From <https://www.ibm.com/developerworks/community/blogs/brian/entry/when_to_use_expect_scripting_and_when_to_avoid_it10?lang=en> 


Named pipe 
# (dump data from one process and load into another)
$ mknod /tmp/my_named_pipe p
$ echo "Test" > /tmp/my_named_pipe
# in another session
$ cat /tmp/my_named_pipe
